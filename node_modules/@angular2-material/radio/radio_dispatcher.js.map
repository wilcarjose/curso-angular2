{"version":3,"file":"radio_dispatcher.js","sourceRoot":"","sources":["../../src/demo-app/components/radio/radio_dispatcher.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AAMzC;;;;;;;;GAQG;AAEH;IAAA;QACU,eAAU,GAAgC,EAAE,CAAC;IAavD,CAAC;IAXC,iFAAiF;IACjF,kCAAM,GAAN,UAAO,EAAU,EAAE,IAAY;QAC7B,GAAG,CAAC,CAAiB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,CAAC;YAAhC,IAAI,QAAQ,SAAA;YACf,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SACpB;IACH,CAAC;IAED,2DAA2D;IAC3D,kCAAM,GAAN,UAAO,QAAmC;QACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAdH;QAAC,iBAAU,EAAE;;yBAAA;IAeb,wBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,yBAAiB,oBAc7B,CAAA","sourcesContent":["import {Injectable} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type MdRadioDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class for radio buttons to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable()\nexport class MdRadioDispatcher {\n  private _listeners: MdRadioDispatcherListener[] = [];\n\n  /** Notify other radio buttons that selection for the given name has been set. */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /** Listen for future changes to radio button selection. */\n  listen(listener: MdRadioDispatcherListener) {\n    this._listeners.push(listener);\n  }\n}\n"]}