{"version":3,"file":"slide-toggle.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/slide-toggle/slide-toggle.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  it,\r\n  describe,\r\n  expect,\r\n  beforeEach,\r\n  inject,\r\n  async\r\n} from '@angular/core/testing';\r\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\r\nimport {By} from '@angular/platform-browser';\r\nimport {Component} from '@angular/core';\r\nimport {MdSlideToggle, MdSlideToggleChange} from './slide-toggle';\r\nimport {NgControl} from '@angular/common';\r\n\r\ndescribe('MdSlideToggle', () => {\r\n  let builder: TestComponentBuilder;\r\n\r\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\r\n    builder = tcb;\r\n  }));\r\n\r\n  describe('basic behavior', () => {\r\n\r\n    let fixture: ComponentFixture<any>;\r\n\r\n    let testComponent: SlideToggleTestApp;\r\n    let slideToggle: MdSlideToggle;\r\n    let slideToggleElement: HTMLElement;\r\n    let slideToggleControl: NgControl;\r\n    let labelElement: HTMLLabelElement;\r\n    let inputElement: HTMLInputElement;\r\n\r\n    beforeEach(async(() => {\r\n      builder.createAsync(SlideToggleTestApp).then(f => {\r\n        fixture = f;\r\n        fixture.detectChanges();\r\n\r\n        let slideToggleDebug = fixture.debugElement.query(By.css('md-slide-toggle'));\r\n\r\n        testComponent = fixture.debugElement.componentInstance;\r\n        slideToggle = slideToggleDebug.componentInstance;\r\n        slideToggleElement = slideToggleDebug.nativeElement;\r\n        slideToggleControl = slideToggleDebug.injector.get(NgControl);\r\n        inputElement = fixture.debugElement.query(By.css('input')).nativeElement;\r\n        labelElement = fixture.debugElement.query(By.css('label')).nativeElement;\r\n      });\r\n    }));\r\n\r\n\r\n    it('should update the model correctly', () => {\r\n      expect(slideToggleElement.classList).not.toContain('md-checked');\r\n\r\n      testComponent.slideModel = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('md-checked');\r\n    });\r\n\r\n    it('should apply class based on color attribute', () => {\r\n      testComponent.slideColor = 'primary';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('md-primary');\r\n\r\n      testComponent.slideColor = 'accent';\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('md-accent');\r\n    });\r\n\r\n    it('should correctly update the disabled property', () => {\r\n      expect(inputElement.disabled).toBeFalsy();\r\n\r\n      testComponent.isDisabled = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.disabled).toBeTruthy();\r\n    });\r\n\r\n    it('should correctly update the checked property', () => {\r\n      expect(slideToggle.checked).toBeFalsy();\r\n\r\n      testComponent.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.checked).toBeTruthy();\r\n    });\r\n\r\n    it('should set the toggle to checked on click', () => {\r\n      expect(slideToggle.checked).toBe(false);\r\n      expect(slideToggleElement.classList).not.toContain('md-checked');\r\n\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('md-checked');\r\n      expect(slideToggle.checked).toBe(true);\r\n    });\r\n\r\n    it('should add a suffix to the inputs id', () => {\r\n      testComponent.slideId = 'myId';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.id).toBe('myId-input');\r\n\r\n      testComponent.slideId = 'nextId';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.id).toBe('nextId-input');\r\n\r\n      testComponent.slideId = null;\r\n      fixture.detectChanges();\r\n\r\n      // Once the id input is falsy, we use a default prefix with a incrementing unique number.\r\n      expect(inputElement.id).toMatch(/md-slide-toggle-[0-9]+-input/g);\r\n    });\r\n\r\n    it('should forward the specified name to the input', () => {\r\n      testComponent.slideName = 'myName';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('myName');\r\n\r\n      testComponent.slideName = 'nextName';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('nextName');\r\n\r\n      testComponent.slideName = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.name).toBe('');\r\n    });\r\n\r\n    it('should forward the aria-label attribute to the input', () => {\r\n      testComponent.slideLabel = 'ariaLabel';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.getAttribute('aria-label')).toBe('ariaLabel');\r\n\r\n      testComponent.slideLabel = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.hasAttribute('aria-label')).toBeFalsy();\r\n    });\r\n\r\n    it('should forward the aria-labelledby attribute to the input', () => {\r\n      testComponent.slideLabelledBy = 'ariaLabelledBy';\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.getAttribute('aria-labelledby')).toBe('ariaLabelledBy');\r\n\r\n      testComponent.slideLabelledBy = null;\r\n      fixture.detectChanges();\r\n\r\n      expect(inputElement.hasAttribute('aria-labelledby')).toBeFalsy();\r\n    });\r\n\r\n    it('should be initially set to ng-pristine', () => {\r\n      expect(slideToggleElement.classList).toContain('ng-pristine');\r\n      expect(slideToggleElement.classList).not.toContain('ng-dirty');\r\n    });\r\n\r\n    it('should emit the new values properly', async(() => {\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      fixture.whenStable().then(() => {\r\n        // We're checking the arguments type / emitted value to be a boolean, because sometimes the\r\n        // emitted value can be a DOM Event, which is not valid.\r\n        // See angular/angular#4059\r\n        expect(testComponent.lastEvent.checked).toBe(true);\r\n      });\r\n    }));\r\n\r\n    it('should support subscription on the change observable', () => {\r\n      slideToggle.change.subscribe((event: MdSlideToggleChange) => {\r\n        expect(event.checked).toBe(true);\r\n      });\r\n\r\n      slideToggle.toggle();\r\n      fixture.detectChanges();\r\n    });\r\n\r\n    it('should have the correct ngControl state initially and after interaction', () => {\r\n      // The control should start off valid, pristine, and untouched.\r\n      expect(slideToggleControl.valid).toBe(true);\r\n      expect(slideToggleControl.pristine).toBe(true);\r\n      expect(slideToggleControl.touched).toBe(false);\r\n\r\n      // After changing the value programmatically, the control should\r\n      // become dirty (not pristine), but remain untouched.\r\n      slideToggle.checked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleControl.valid).toBe(true);\r\n      expect(slideToggleControl.pristine).toBe(false);\r\n      expect(slideToggleControl.touched).toBe(false);\r\n\r\n      // After a user interaction occurs (such as a click), the control should remain dirty and\r\n      // now also be touched.\r\n      labelElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleControl.valid).toBe(true);\r\n      expect(slideToggleControl.pristine).toBe(false);\r\n      expect(slideToggleControl.touched).toBe(true);\r\n    });\r\n\r\n    it('should not set the ngControl to touched when changing the state programmatically', () => {\r\n      // The control should start off with being untouched.\r\n      expect(slideToggleControl.touched).toBe(false);\r\n\r\n      testComponent.slideChecked = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleControl.touched).toBe(false);\r\n      expect(slideToggleElement.classList).toContain('md-checked');\r\n\r\n      // After a user interaction occurs (such as a click), the control should remain dirty and\r\n      // now also be touched.\r\n      inputElement.click();\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleControl.touched).toBe(true);\r\n      expect(slideToggleElement.classList).not.toContain('md-checked');\r\n    });\r\n\r\n    it('should not set the ngControl to touched when changing the model', () => {\r\n      // The control should start off with being untouched.\r\n      expect(slideToggleControl.touched).toBe(false);\r\n\r\n      testComponent.slideModel = true;\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleControl.touched).toBe(false);\r\n      expect(slideToggle.checked).toBe(true);\r\n      expect(slideToggleElement.classList).toContain('md-checked');\r\n    });\r\n\r\n    it('should correctly set the slide-toggle to checked on focus', () => {\r\n      expect(slideToggleElement.classList).not.toContain('md-slide-toggle-focused');\r\n\r\n      dispatchFocusChangeEvent('focus', inputElement);\r\n      fixture.detectChanges();\r\n\r\n      expect(slideToggleElement.classList).toContain('md-slide-toggle-focused');\r\n    });\r\n\r\n  });\r\n\r\n});\r\n\r\n/**\r\n * Dispatches a focus change event from an element.\r\n * @param eventName Name of the event, either 'focus' or 'blur'.\r\n * @param element The element from which the event will be dispatched.\r\n */\r\nfunction dispatchFocusChangeEvent(eventName: string, element: HTMLElement): void {\r\n  let event  = document.createEvent('Event');\r\n  event.initEvent(eventName, true, true);\r\n  element.dispatchEvent(event);\r\n}\r\n\r\n@Component({\r\n  selector: 'slide-toggle-test-app',\r\n  template: `\r\n    <md-slide-toggle [(ngModel)]=\"slideModel\" [disabled]=\"isDisabled\" [color]=\"slideColor\" \r\n                     [id]=\"slideId\" [checked]=\"slideChecked\" [name]=\"slideName\" \r\n                     [aria-label]=\"slideLabel\" [ariaLabel]=\"slideLabel\" \r\n                     [ariaLabelledby]=\"slideLabelledBy\" (change)=\"lastEvent = $event\">\r\n      <span>Test Slide Toggle</span>\r\n    </md-slide-toggle>\r\n  `,\r\n  directives: [MdSlideToggle]\r\n})\r\nclass SlideToggleTestApp {\r\n  isDisabled: boolean = false;\r\n  slideModel: boolean = false;\r\n  slideChecked: boolean = false;\r\n  slideColor: string;\r\n  slideId: string;\r\n  slideName: string;\r\n  slideLabel: string;\r\n  slideLabelledBy: string;\r\n  lastEvent: MdSlideToggleChange;\r\n}\r\n"]}